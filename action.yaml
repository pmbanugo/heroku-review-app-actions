name: "Manage Heroku Review Apps"
description: Use Heroku API to replicate the review app integration
author: Peter Mbanugo (@pmbanugo - GitHub)
inputs:
  app-name-prefix:
    description: "Prefix for the app. This is can be the name of the pipeline e.g vercel prefix will produce vercel-pr-PR_NUMBER.herokuapp.com"
    required: false
    default: ""
  api-key:
    description: "Your Heroku API key"
    required: true
  pipeline-id:
    description: "The id of the pipeline to deploy review app for"
    required: true
  region:
    description: "Region to deploy. eu or us"
    default: "eu"
    required: false
  stack:
    description: "Heroku stack to deploy to e.g heroku-18. Default: heroku-20"
    default: "heroku-20"
    required: false
outputs:
  url:
    description: "The URL for the app"
    value: ${{ steps.output-url.outputs.url }}
branding:
  icon: "play-circle"
  color: "purple"
runs:
  using: "composite"
  steps:
    - name: Generate app name
      shell: bash
      env:
        APP_PREFIX: ${{ inputs.app-name-prefix }}
      run: |
        #!/bin/bash

        if [[ $APP_PREFIX == '' ]]; then
        echo "using default prefix"
        echo "APP_NAME=heroku-review-app-actions-pr-${{ github.event.number }}" >> $GITHUB_ENV
        else
        echo "using app prefix"
        echo "APP_NAME=${{ inputs.app-name-prefix }}-pr-${{ github.event.number }}" >> $GITHUB_ENV
        fi
    - name: Create App
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      shell: bash
      run: |
        curl -X POST https://api.heroku.com/apps \
        -d '{
        "name": "'"$APP_NAME"'",
        "region": "${{ inputs.region }}",
        "stack": "${{ inputs.stack }}"
        }' \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.api-key }}"
    - name: Update Pipeline
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      shell: bash
      run: |
        curl -X POST https://api.heroku.com/pipeline-couplings \
          -d '{
          "app": "'"$APP_NAME"'",
          "pipeline": "'"${{ inputs.pipeline-id }}"'",
          "stage": "review"
        }' \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.api-key }}"
    - name: Create Source Endpoint
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      id: source_endpoint
      shell: bash
      run: |
        echo ::set-output name=SOURCE_ENDPOINT::$(curl -X POST https://api.heroku.com/sources \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.api-key }}" | \
        jq -r '{get: .source_blob.get_url, put: .source_blob.put_url}')
    - name: Compress Source Code
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      shell: bash
      run: |
        tar -czvf source.tar.gz $(git ls-files)
    - name: Upload Source Code
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      shell: bash
      env:
        SOURCE_ENDPOINT_GET: ${{ steps.source_endpoint_env.outputs.SOURCE_ENDPOINT_GET }}
      run: |
        export URL=$(echo ${{ toJSON(steps.source_endpoint.outputs.SOURCE_ENDPOINT) }} | jq -r '.put')
        curl $URL -X PUT -H 'Content-Type:' --data-binary @source.tar.gz
    - name: Create Build
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      shell: bash
      run: |
        export SOURCE_GET_URL=$(echo ${{ toJSON(steps.source_endpoint.outputs.SOURCE_ENDPOINT) }} | jq -r '.get')
        export OUTPUT_STREAM_URL=$(curl -X POST https://api.heroku.com/apps/$APP_NAME/builds \
        -d '{"source_blob":{"url":"'"$SOURCE_GET_URL"'", "version": "'"${{ github.event.pull_request.head.sha }}"'"}}' \
        -H 'Accept: application/vnd.heroku+json; version=3' \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${{ inputs.api-key }}" | \
        jq -r '.output_stream_url')
        curl $OUTPUT_STREAM_URL
    - name: Set Output:url
      id: output-url
      shell: bash
      run: echo "::set-output name=url::$(echo https://$APP_NAME.herokuapp.com)"
    - name: Delete Review App
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
      shell: bash
      run: |
        curl -X DELETE https://api.heroku.com/apps/$APP_NAME \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.api-key }}"
